import { AbortController, Headers as NodeHeaders, Request as NodeRequest } from "@remix-run/node";
import type { AppLoadContext, ServerBuild } from "@remix-run/server-runtime";
import type { Handler, HandlerEvent, HandlerContext, HandlerResponse } from "@netlify/functions";
import type { Response as NodeResponse } from "@remix-run/node";
/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action.
 */
export interface GetLoadContextFunction {
    (event: HandlerEvent, context: HandlerContext): AppLoadContext;
}
export declare type RequestHandler = ReturnType<typeof createRequestHandler>;
export declare function createRequestHandler({ build, getLoadContext, mode, }: {
    build: ServerBuild;
    getLoadContext?: AppLoadContext;
    mode?: string;
}): Handler;
export declare function createRemixRequest(event: HandlerEvent, abortController?: AbortController): NodeRequest;
export declare function createRemixHeaders(requestHeaders: HandlerEvent["multiValueHeaders"]): NodeHeaders;
export declare function sendRemixResponse(response: NodeResponse, abortController: AbortController): Promise<HandlerResponse>;
