#!/usr/bin/env node
/**
 * @remix-run/dev v1.3.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

var path = require('path');
var meow = require('meow');
var inspector = require('inspector');
var inquirer = require('inquirer');
var colors = require('./colors');
var commands = require('./cli/commands');
var packageJson = require('./package.json');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var path__namespace = /*#__PURE__*/_interopNamespace(path);
var meow__default = /*#__PURE__*/_interopDefaultLegacy(meow);
var inspector__default = /*#__PURE__*/_interopDefaultLegacy(inspector);
var inquirer__default = /*#__PURE__*/_interopDefaultLegacy(inquirer);
var colors__namespace = /*#__PURE__*/_interopNamespace(colors);
var commands__namespace = /*#__PURE__*/_interopNamespace(commands);
var packageJson__default = /*#__PURE__*/_interopDefaultLegacy(packageJson);

const remixDevPackageVersion = packageJson__default["default"].version;
const helpText = `
${colors__namespace.logoBlue("R")} ${colors__namespace.logoGreen("E")} ${colors__namespace.logoYellow("M")} ${colors__namespace.logoPink("I")} ${colors__namespace.logoRed("X")}

${colors__namespace.heading("Usage")}:
  $ remix create <${colors__namespace.arg("projectDir")}> --template <${colors__namespace.arg("template")}>
  $ remix init [${colors__namespace.arg("projectDir")}]
  $ remix build [${colors__namespace.arg("projectDir")}]
  $ remix dev [${colors__namespace.arg("projectDir")}]
  $ remix routes [${colors__namespace.arg("projectDir")}]
  $ remix setup [${colors__namespace.arg("remixPlatform")}]

${colors__namespace.heading("Options")}:
  --help, -h          Print this help message and exit
  --version, -v       Print the CLI version and exit
  --no-color          Disable ANSI colors in console output
\`create\` Options:
  --template          The template to use (required)
  --no-install        Skip installing dependencies after creation
  --no-typescript     Convert the template to JavaScript
  --remix-version     The version of Remix to use
\`build\` Options:
  --sourcemap         Generate source maps for production
\`dev\` Options:
  --debug             Attach Node.js inspector
\`routes\` Options:
  --json              Print the routes as JSON

${colors__namespace.heading("Values")}:
  - ${colors__namespace.arg("projectDir")}        The Remix project directory
  - ${colors__namespace.arg("template")}          The project template to use
  - ${colors__namespace.arg("remixPlatform")}     node, cloudflare-pages, or cloudflare-workers

${colors__namespace.heading("Creating a new project")}:

  Remix projects are created from templates. A template can be:

  - a file path to a directory of files
  - a file path to a tarball
  - the name of a repo in the remix-run GitHub org
  - the name of a username/repo on GitHub
  - the URL of a tarball

  $ remix create my-app --template /path/to/remix-template
  $ remix create my-app --template /path/to/remix-template.tar.gz
  $ remix create my-app --template [remix-run/]grunge-stack
  $ remix create my-app --template github-username/repo-name
  $ remix create my-app --template https://github.com/:username/:repo
  $ remix create my-app --template https://github.com/:username/:repo/tree/:branch
  $ remix create my-app --template https://github.com/:username/:repo/archive/refs/tags/:tag.tar.gz
  $ remix create my-app --template https://example.com/remix-template.tar.gz

  To create a new project from a template in a private GitHub repo,
  set the \`GITHUB_TOKEN\` environment variable to a personal access
  token with access to that repo.

${colors__namespace.heading("Initialize a project:")}:

  Remix project templates may contain a \`remix.init\` directory
  with a script that initializes the project. This script automatically
  runs during \`remix create\`, but if you ever need to run it manually
  (e.g. to test it out) you can:

  $ remix init

${colors__namespace.heading("Build your project")}:

  $ remix build
  $ remix build --sourcemap
  $ remix build my-app

${colors__namespace.heading("Run your project locally in development")}:

  $ remix dev
  $ remix dev my-app
  $ remix dev --debug

${colors__namespace.heading("Show all routes in your app")}:

  $ remix routes
  $ remix routes my-app
  $ remix routes --json
`;

async function run() {
  let {
    flags,
    input,
    showHelp,
    showVersion
  } = meow__default["default"](helpText, {
    description: false,
    booleanDefault: undefined,
    flags: {
      help: {
        type: "boolean",
        alias: "h"
      },
      version: {
        type: "boolean",
        alias: "v"
      },
      template: {
        type: "string"
      },
      install: {
        type: "boolean"
      },
      typescript: {
        type: "boolean"
      },
      remixVersion: {
        type: "string",
        default: remixDevPackageVersion
      },
      json: {
        type: "boolean"
      },
      sourcemap: {
        type: "boolean"
      },
      debug: {
        type: "boolean"
      }
    }
  });
  if (flags.help) showHelp();
  if (flags.version) showVersion(); //   if (!flags.template) {
  //     if (colors.supportsColor && process.env.NODE_ENV !== "test") {
  //       let anim = chalkAnimation.rainbow(
  //         `\nR E M I X - v${remixDevPackageVersion}\n`
  //       );
  //       await new Promise((res) => setTimeout(res, 1500));
  //       anim.stop();
  //     }
  //   }

  switch (input[0]) {
    case "create": // `remix new` is an alias for `remix create`

    case "new":
      {
        var _await$inquirer$promp;

        let projectPath = input.length > 1 ? input[1] : (_await$inquirer$promp = await inquirer__default["default"].prompt([{
          type: "input",
          name: "dir",
          message: "Where would you like to create your app?",
          default: "./my-remix-app"
        }]).catch(error => {
          if (error.isTtyError) {
            showHelp();
            return;
          }

          throw error;
        })) === null || _await$inquirer$promp === void 0 ? void 0 : _await$inquirer$promp.dir;

        if (!projectPath) {
          showHelp();
          return;
        }

        let projectDir = path__namespace.resolve(process.cwd(), projectPath);
        let answers = await inquirer__default["default"].prompt([{
          name: "appType",
          type: "list",
          message: "What type of app do you want to create?",

          when() {
            return flags.template === undefined;
          },

          choices: [{
            name: "A pre-configured stack ready for production",
            value: "stack"
          }, {
            name: "Just the basics",
            value: "template"
          }]
        }, {
          name: "appTemplate",
          type: "list",

          when(answers) {
            return answers.appType === "stack";
          },

          message: "Which Stack do you want? ",
          loop: false,
          suffix: "(Learn more about these stacks: https://remix.run/stacks)",
          choices: [{
            name: "Blues",
            value: "blues-stack"
          }, {
            name: "Indie",
            value: "indie-stack"
          }, {
            name: "Grunge",
            value: "grunge-stack"
          }]
        }, {
          name: "appTemplate",
          type: "list",

          when(answers) {
            return answers.appType === "template";
          },

          message: `Where do you want to deploy? Choose Remix if you're unsure, it's easy to change deployment targets.`,
          loop: false,
          choices: [{
            name: "Remix App Server",
            value: "remix"
          }, {
            name: "Express Server",
            value: "express"
          }, {
            name: "Architect (AWS Lambda)",
            value: "arc"
          }, {
            name: "Fly.io",
            value: "fly"
          }, {
            name: "Netlify",
            value: "netlify"
          }, {
            name: "Vercel",
            value: "vercel"
          }, {
            name: "Cloudflare Pages",
            value: "cloudflare-pages"
          }, {
            name: "Cloudflare Workers",
            value: "cloudflare-workers"
          }]
        }, {
          name: "useTypeScript",
          type: "list",
          message: "TypeScript or JavaScript?",

          when(answers) {
            return flags.template === undefined && answers.appType !== "stack";
          },

          choices: [{
            name: "TypeScript",
            value: true
          }, {
            name: "JavaScript",
            value: false
          }]
        }, {
          name: "install",
          type: "confirm",
          message: "Do you want me to run `npm install`?",

          when() {
            return flags.install === undefined;
          },

          default: true
        }]).catch(error => {
          if (error.isTtyError) {
            console.warn(colors__namespace.warning("ðŸš¨ Your terminal doesn't support interactivity; using default configuration.\n\n" + "If you'd like to use different settings, try passing them as arguments. Run " + "`npx create-remix@latest --help` to see available options."));
            return {
              appTemplate: "remix",
              useTypeScript: true,
              install: true
            };
          }

          throw error;
        });
        await commands__namespace.create({
          appTemplate: flags.template ?? answers.appTemplate,
          projectDir,
          remixVersion: flags.remixVersion,
          installDeps: flags.install ?? answers.install,
          useTypeScript: flags.typescript ?? answers.useTypeScript,
          githubToken: process.env.GITHUB_TOKEN
        });
        break;
      }

    case "init":
      {
        let remixRoot = input[1];

        if (!remixRoot) {
          remixRoot = process.env.REMIX_ROOT || process.cwd();
        }

        await commands__namespace.init(remixRoot);
        break;
      }

    case "routes":
      await commands__namespace.routes(input[1], flags.json ? "json" : "jsx");
      break;

    case "build":
      if (!process.env.NODE_ENV) process.env.NODE_ENV = "production";
      await commands__namespace.build(input[1], process.env.NODE_ENV, flags.sourcemap);
      break;

    case "watch":
      if (!process.env.NODE_ENV) process.env.NODE_ENV = "development";
      await commands__namespace.watch(input[1], process.env.NODE_ENV);
      break;

    case "setup":
      await commands__namespace.setup(input[1]);
      break;

    case "dev":
      if (!process.env.NODE_ENV) process.env.NODE_ENV = "development";
      if (flags.debug) inspector__default["default"].open();
      await commands__namespace.dev(input[1], process.env.NODE_ENV);
      break;

    default:
      // `remix ./my-project` is shorthand for `remix dev ./my-project`
      if (!process.env.NODE_ENV) process.env.NODE_ENV = "development";
      await commands__namespace.dev(input[0], process.env.NODE_ENV);
  }
}

run().then(() => {
  process.exit(0);
}, error => {
  console.error(error);
  process.exit(1);
});
